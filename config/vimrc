
" Plugins  
call plug#begin('~/.vim/plugged')

" Colors
Plug 'jacoborus/tender.vim'

" Misc
Plug 'junegunn/vim-easy-align'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'alvan/vim-closetag'

" Autocomplete + Lint 
" No tears now only dreams Plug 'valloric/youcompleteme'
Plug 'Shougo/neocomplete'
Plug 'Shougo/neoinclude.vim'

Plug 'ternjs/tern_for_vim'
Plug 'davidhalter/jedi-vim'
Plug 'justmao945/vim-clang'
Plug 'lervag/vimtex'

Plug 'w0rp/ale'
Plug 'sheerun/vim-polyglot'

" Markdown 
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'reedes/vim-pencil'
Plug 'junegunn/goyo.vim'

" JS 
Plug 'pangloss/vim-javascript'
Plug 'jelera/vim-javascript-syntax'
Plug 'maksimr/vim-jsbeautify'

" CSS 
Plug 'ap/vim-css-color'

" Latex 
Plug 'lervag/vimtex'

" George
Plug 'aidenbenner/vim-george'

call plug#end()

"" Config for neocomplete  
" Config for clang
let g:clang_auto = 0
let g:clang_c_completeopt = 'menuone'
let g:clang_cpp_completeopt = 'menuone'
let g:clang_exec = 'clang'
let g:clang_cpp_options = '-std=c++14'

" Config for jedi
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0

let g:acp_enableAtStartup = 1
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#auto_complete_delay = 0
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3

if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#sources#omni#input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:neocomplete#force_omni_input_patterns.javascript = '[^. \t]\.\w*'
let g:neocomplete#sources#omni#input_patterns.tex =
        \ '\v\\%('
        \ . '\a*%(ref|cite)\a*%(\s*\[[^]]*\])?\s*\{[^{}]*'
        \ . '|includegraphics%(\s*\[[^]]*\])?\s*\{[^{}]*'
        \ . '|%(include|input)\s*\{[^{}]*'
        \ . ')'

autocmd FileType python setlocal omnifunc=jedi#completions
autocmd FileType javascript setlocal omnifunc=tern#Complete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags


"" Config for Ale
let g:ale_linters = {
      \ 'javascript': [ 'eslint' ],
      \ 'python': [ 'autopep', 'flake8', 'pylint' ],
      \ 'cpp': [ 'gcc', 'clang' ],
      \}

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" vimtex config
let g:vimtex_compiler_latexmk = {'callback' : 0}
let g:latex_view_general_viewer = "zathura"
let g:vimtex_view_method = "zathura"
let g:tex_conceal = ""

" Config for YouCompleteMe
let g:ycm_complete_in_comments=0
let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'

" Use system clipboard
set clipboard=unnamedplus

" UI 
set ruler
set number
set relativenumber
set cursorline
set nocompatible
set showcmd 
set lazyredraw

let loaded_matchparen = 1
filetype plugin indent on
set spell spelllang=en_us

" Colors  
syntax on
set t_Co=256
colorscheme tender 

" Airline  
set laststatus=2
let g:airline_theme='simple'

" Bash for windows 
set term=screen-256color

" Misc 
set nocp
set wildmenu
set backspace=eol,start,indent
set autoread
set magic

set colorcolumn=110
highlight ColorColumn ctermbg=darkgray

"md, markdown == mkd
au! BufRead,BufNewFile *.markdown set filetype=mkd
au! BufRead,BufNewFile *.md       set filetype=mkd

map <C-n> :NERDTreeToggle<CR>

" Change swp file location
set undodir=~/.vim/.undo//
set backupdir=~/.vim/.backup//
set directory=~/.vim/.swp//

" Tabs 
set expandtab
set smarttab
set shiftwidth=2
set tabstop=2
set autoindent
filetype indent plugin on

" Search 
set ignorecase
set incsearch
set hlsearch
set smartcase
set showmatch

" Folding 
set foldenable 
set foldlevelstart=10
set foldmethod=indent 

" Splits 
set splitbelow
set splitright

" BINDINGS 
let mapleader = "\<Space>"

" Insert mode bindings 
inoremap jk <Esc>

" Normal mode bindings 
" split settings " 
nmap <S-Tab> :tabn <CR>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <leader>t :call CompTemp() <cr>
nnoremap <leader>m :w <bar> exec ':!make' <CR> 

autocmd filetype c nnoremap <leader>r :w <bar> exec '!gcc -std=c99 '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>
autocmd filetype cpp nnoremap <leader>r :w <bar> exec '!g++ -g -std=c++11 '.shellescape('%').' -o  '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>
autocmd filetype cc nnoremap <leader>r :w <bar> exec '!g++ -g -std=c++11 '.shellescape('%').' -o ' .shellescape('%:r').' && ./'.shellescape('%:r')<CR>
autocmd FileType python nnoremap <leader>r :w <bar> exec '!python3 ' shellescape(@%, 1)<CR>
autocmd filetype sh nnoremap <leader>r :w <bar> exec '!sh ' shellescape(@%, 1)<CR>

autocmd filetype scala nnoremap <leader>r :w <bar> exec '!scala ' shellescape(@%, 1)<CR>

autocmd filetype george nnoremap <leader>r :GeorgeCheck <CR>
inoremap <expr><Tab>        pumvisible() ? "\<C-n>" : "\<Tab>"

" Functions 
function CompTemp()
  :read ~/.vim/templates/comp.cc
endfunction! 

augroup latex_group
  au Filetype tex nmap <buffer> <F3> <plug>(vimtex-compile)
  au Filetype tex nmap <buffer> <F4> <plug>(vimtex-errors)
  au Filetype tex nmap <buffer> <F5> <plug>(vimtex-view)
augroup END
