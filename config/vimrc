" Plugins
call plug#begin('~/.vim/plugged')

Plug 'editorconfig/editorconfig-vim'

" Colors
Plug 'jacoborus/tender.vim'

" Find
Plug 'junegunn/fzf'

" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" Misc
Plug 'junegunn/vim-easy-align'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" closes html tags
Plug 'alvan/vim-closetag'

" :Autoformat
Plug 'Chiel92/vim-autoformat'

" Languages
Plug 'ternjs/tern_for_vim'
Plug 'davidhalter/jedi-vim'
Plug 'justmao945/vim-clang'
Plug 'lervag/vimtex'

Plug 'w0rp/ale'
Plug 'sheerun/vim-polyglot'

" Markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'reedes/vim-pencil'
Plug 'junegunn/goyo.vim'

" JS
Plug 'pangloss/vim-javascript'
Plug 'jelera/vim-javascript-syntax'
Plug 'maksimr/vim-jsbeautify'

" CSS
Plug 'ap/vim-css-color'

" Latex
Plug 'lervag/vimtex'

call plug#end()

if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif

" Use deoplete.
let g:deoplete#enable_at_startup = 1

" vimtex config
let g:vimtex_compiler_latexmk = {'callback' : 0}
let g:latex_view_general_viewer = "zathura"
let g:vimtex_view_method = "zathura"
let g:tex_conceal = ""

" Use system clipboard
set clipboard=unnamed

" UI
set ruler
set number
" set relativenumber
" set cursorline
set showcmd
set lazyredraw

let loaded_matchparen = 1
filetype plugin indent on
set spell spelllang=en_us

" Colors
syntax on
colorscheme tender

" Airline
set laststatus=2
let g:airline_theme='simple'

" Bash for windows
set term=screen-256color

" Misc
set nocp
set wildmenu
set backspace=eol,start,indent
set autoread
set magic

set colorcolumn=110
highlight ColorColumn ctermbg=darkgray

"md, markdown == mkd
au! BufRead,BufNewFile *.markdown set filetype=mkd
au! BufRead,BufNewFile *.md       set filetype=mkd

" Change swp file location
set undodir=~/.vim/.undo//
set backupdir=~/.vim/.backup//
set directory=~/.vim/.swp//

" Tabs
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab

set expandtab
set smarttab
set autoindent
filetype indent plugin on

" Search
set ignorecase
set incsearch
set hlsearch
set smartcase
set showmatch

" Folding
set nofoldenable
set foldlevelstart=10
set foldmethod=indent

" Splits
set splitbelow
set splitright

" BINDINGS
let mapleader = "\<Space>"

"" bindings - plugins 

"" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

"" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

map <C-n> :NERDTreeToggle<CR>

"" Fugitive bindings
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gD :Gdiff HEAD<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gl :Git log<CR>
nnoremap <leader>gp :Git push<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gr :Gremove<CR>
nnoremap <leader>gg :Ggrep<Space>

" Insert mode bindings
inoremap jk <Esc>

" Neocomplete menu control with tab/stab
inoremap <expr><Tab>        pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr><S-Tab>      pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Normal mode bindings
" split settings "
nmap <S-Tab> :tabn <CR>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <leader>f :FZF <cr>
nnoremap <leader>t :call CompTemp() <cr>
nnoremap <leader>m :w <bar> exec ':!make' <CR>

autocmd filetype c nnoremap <leader>r :w <bar> exec '!gcc -std=c99 '.shellescape('%').' -o '.shellescape('%:r').' .out && ./'.shellescape('%:r').'.out'<CR>
autocmd filetype cpp,cc nnoremap <leader>r :w <bar> exec '!g++ -g -std=c++11 '.shellescape('%').' -o  '.shellescape('%:r')'.out && ./'.shellescape('%:r')'.out' <CR>
autocmd filetype python nnoremap <leader>r :w <bar> exec '!python3 ' shellescape(@%, 1)<CR>
autocmd filetype sh nnoremap <leader>r :w <bar> exec '!sh ' shellescape(@%, 1)<CR>
autocmd filetype scala nnoremap <leader>r :w <bar> exec '!scala ' shellescape(@%, 1)<CR>


" Functions
function CompTemp()
    :read ~/.vim/templates/comp.cc
endfunction!

augroup latex_group
    au Filetype tex nmap <buffer> <F3> <plug>(vimtex-compile)
    au Filetype tex nmap <buffer> <F4> <plug>(vimtex-errors)
    au Filetype tex nmap <buffer> <F5> <plug>(vimtex-view)
augroup END

noremap <F3> :Autoformat<CR>


